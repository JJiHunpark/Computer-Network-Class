#include<netinet/in.h>
#include<errno.h>
#include<netdb.h>
#include<stdio.h>
#include<stdlib.h>   
#include<string.h>    
 

#include<netinet/udp.h>   			// udp header를 제공받기위한 헤더
#include<netinet/tcp.h>   			// tcp header를 제공받기위한 헤더
#include<netinet/ip.h>    			// ip header를 제공받기한 헤더
#include<netinet/if_ether.h>  			// ETH_P_ALL 을 제공받기위한 헤더

#include<sys/socket.h>
#include<arpa/inet.h>
#include<sys/ioctl.h>
#include<sys/time.h>
#include<sys/types.h>
#include<unistd.h>

//소켓관련 헤더
void ProcessPacket(unsigned char* , int); 	// protocol 고유번호를 받고 실행하는 함수
void print_ip_header(unsigned char* , int); 	// ip header 출력 함수
void print_tcp_packet(unsigned char * , int ); 	// tcp header 출력 함수
void print_udp_packet(unsigned char * , int ); 	// udp header 출력 함수
void PrintData (unsigned char* , int); 		// Appdata 출력 함수
 
FILE *logfile;
struct sockaddr_in source,dest; 		// sockaddr_in 구조체를 선언(목적지와 출발지 저장)
int tcp=0,udp=0,icmp=0,others=0,igmp=0,total=0,i,j; 
 
int main()
{
    int saddr_size , data_size; 
    struct sockaddr saddr; 					// 소켓의 주소를 표현하는 구조체 생성
         							// IP 포트, IP 주소 저장
    unsigned char *buffer = (unsigned char *) malloc(65536); 	// buffer변수 동적할당
      
    logfile=fopen("result of sniff.txt","w");			// result of sniff.txt 파일에 정보 넣기 위함

    if(logfile==NULL) 
    {
        printf("Unable to create result of sniff.txt file.");
    }

    printf("Starting...\n"); 					// 파일 실행시 출력
     
    // 데이터 링크 계층으로부터 패킷 수신
    // socket() 함수로 소켓을 생성하여 반환
    // 매개변수 int domain, int type, int protocol (통신 방식, 데이터 전송 형태, 프로토콜 사용 지정)
    int sock_raw = socket( AF_PACKET , SOCK_RAW , htons(ETH_P_ALL));	
     
    if(sock_raw < 0)
    {
        perror("Socket Error");
        return 1;
    }

    while(1)
    {
        saddr_size = sizeof saddr;
       
        //recvfrom 함수 호출로 sock_raw 라는 소켓을 통해 패킷을 수신
        data_size = recvfrom(sock_raw , buffer , 65536 , 0 , &saddr , (socklen_t*)&saddr_size);
      
        if(data_size < 0 )
        {
            printf("Recvfrom error , failed to get packets\n");
            return 1;
        }
        ProcessPacket(buffer , data_size); 			//buffer에 저장된 값들과 데이터수를 인자로 전달 
    }

    close(sock_raw);
    printf("Finished");
    return 0;
}

// protocol 고유번호를 받고 실행하는 함수
void ProcessPacket(unsigned char* buffer, int size)
{
    //ethernet header 를 제외하고ip header 부분의 패킷을 얻음
    struct iphdr *iph = (struct iphdr*)(buffer + sizeof(struct ethhdr));
    ++total;

    //프로토콜 고유번호 체크
    switch (iph->protocol) 
    {         
        case 6:  //TCP Protocol
            ++tcp;
            print_tcp_packet(buffer , size);
            break;
         
        case 17: //UDP Protocol
            ++udp;
            print_udp_packet(buffer , size);
            break;
         
        default: //다른 Protocol
            ++others;
            break;
    }
    //어떤 프로토콜이 들어왔는지 출력
    printf("TCP : %d   UDP : %d   Others : %d   Total : %d\r", tcp , udp , others , total);
}
 
//ip header를 출력하기 위한 함수
void print_ip_header(unsigned char* Buffer, int Size) 
{
    unsigned short iphdrlen;  					//ip헤더 길이를 저장할 변수선언
         
    //ethernet header 를 제외하고ip header 부분의 패킷을 얻음
    struct iphdr *iph = (struct iphdr *)(Buffer  + sizeof(struct ethhdr) ); 

    iphdrlen =iph->ihl*4; 					//ip_header_len 안의 값들과 4를 곱해서 원래 헤더길이를 구한다(32bit)
     
    memset(&source, 0, sizeof(source));  			//소스에서 소스의 크기만큼 0으로 변환
    source.sin_addr.s_addr = iph->saddr; 
     
    memset(&dest, 0, sizeof(dest));  				//목적지에서 목적지의 크기만큼 0으로 변환
    dest.sin_addr.s_addr = iph->daddr;
     
    fprintf(logfile , "\n");
    fprintf(logfile , "< IP Header >\n");
    fprintf(logfile , "   IP Version        : %d\n",(unsigned int)iph->version);
    fprintf(logfile , "   IP Header Length  : %d DWORDS or %d Bytes\n",(unsigned int)iph->ihl,((unsigned int)(iph->ihl))*4);
    fprintf(logfile , "   Type Of Service   : %d\n",(unsigned int)iph->tos);
    fprintf(logfile , "   IP Total Length   : %d  Bytes(Size of Packet)\n",ntohs(iph->tot_len));
    fprintf(logfile , "   Identification    : %d\n",ntohs(iph->id));
    fprintf(logfile , "   TTL      : %d\n",(unsigned int)iph->ttl);
    fprintf(logfile , "   Protocol : %d\n",(unsigned int)iph->protocol);
    fprintf(logfile , "   Checksum : %d\n",ntohs(iph->check));
    fprintf(logfile , "   Source IP        : %s\n",inet_ntoa(source.sin_addr));
    fprintf(logfile , "   Destination IP   : %s\n",inet_ntoa(dest.sin_addr));
}
 
//tcp header를 출력하기 위한 함수
void print_tcp_packet(unsigned char* Buffer, int Size)
{
    unsigned short iphdrlen;  					//ip프로토콜의 길이를 정의하기 위한 필드
     
    struct iphdr *iph = (struct iphdr *)( Buffer  + sizeof(struct ethhdr) );
    iphdrlen = iph->ihl*4;
     
    struct tcphdr *tcph=(struct tcphdr*)(Buffer + iphdrlen + sizeof(struct ethhdr));
             
    int header_size =  sizeof(struct ethhdr) + iphdrlen + tcph->doff*4;
     
    fprintf(logfile , "\n\n----------------------- TCP Packet ----------------------- \n");  
         
    //ip프로토콜의 정보를 log파일에 적는 함수를 선언하면서 하위 프로토콜의 정보를 정의
    print_ip_header(Buffer,Size);  
         
    fprintf(logfile , "\n");
    fprintf(logfile , "< TCP Header >\n");
    fprintf(logfile , "   Source Port      : %u\n",ntohs(tcph->source));
    fprintf(logfile , "   Destination Port : %u\n",ntohs(tcph->dest));
    fprintf(logfile , "   Sequence Number    : %u\n",ntohl(tcph->seq));
    fprintf(logfile , "   Acknowledge Number : %u\n",ntohl(tcph->ack_seq));
    fprintf(logfile , "   Header Length      : %d DWORDS or %d BYTES\n" ,(unsigned int)tcph->doff,(unsigned int)tcph->doff*4);
    fprintf(logfile , "   Urgent Flag          : %d\n",(unsigned int)tcph->urg);
    fprintf(logfile , "   Acknowledgement Flag : %d\n",(unsigned int)tcph->ack);
    fprintf(logfile , "   Push Flag            : %d\n",(unsigned int)tcph->psh);
    fprintf(logfile , "   Reset Flag           : %d\n",(unsigned int)tcph->rst);
    fprintf(logfile , "   Synchronise Flag     : %d\n",(unsigned int)tcph->syn);
    fprintf(logfile , "   Finish Flag          : %d\n",(unsigned int)tcph->fin);
    fprintf(logfile , "   Window         : %d\n",ntohs(tcph->window));
    fprintf(logfile , "   Checksum       : %d\n",ntohs(tcph->check));
    fprintf(logfile , "   Urgent Pointer : %d\n",tcph->urg_ptr);
   

  fprintf(logfile , "                        DATA Dump                         ");
PrintData(Buffer,iphdrlen);
fprintf(logfile,"TCP Header\n");
PrintData(Buffer+iphdrlen,tcph->doff*4);
fprintf(logfile,"Data Payload\n");
      
    PrintData(Buffer + header_size , Size - header_size );

    fprintf(logfile , "\n");                         
    fprintf(logfile , "\n-----------------------------------------------------------\n");
}
 
//udp header를 출력하기 위한 함수
void print_udp_packet(unsigned char *Buffer , int Size)
{
     
    unsigned short iphdrlen; 					// ip프로토콜의 헤더 길이를 나타내기 위한 변수
     
    struct iphdr *iph = (struct iphdr *)(Buffer +  sizeof(struct ethhdr));
    iphdrlen = iph->ihl*4; 					// ip_header_len 안의 값들과 4를 곱해서 ip헤더길이를 구함
     
    struct udphdr *udph = (struct udphdr*)(Buffer + iphdrlen  + sizeof(struct ethhdr));
     
    int header_size =  sizeof(struct ethhdr) + iphdrlen + sizeof udph;
     
    fprintf(logfile , "\n\n----------------------- UDP Packet ----------------------- \n");
     
    print_ip_header(Buffer,Size);           
     
    fprintf(logfile , "\n< UDP Header >\n");
    fprintf(logfile , "Source Port      : %d\n" , ntohs(udph->source));
    fprintf(logfile , "Destination Port : %d\n" , ntohs(udph->dest));
    fprintf(logfile , "UDP Length       : %d\n" , ntohs(udph->len));
    fprintf(logfile , "\n");
  

    fprintf(logfile , "\n-----------------------------------------------------------\n");
}
 
// Appdata 출력 함수
void PrintData (unsigned char* data , int Size)
{
    int i , j;
    for(i=0 ; i < Size ; i++)
    {
        if( i!=0 && i%16==0)   					// 만약 한 행이 16개가 되면 다음 줄로 넘어감
        {
            fprintf(logfile , "         ");
            for(j=i-16 ; j<i ; j++)
            {
                if(data[j]>=32 && data[j]<=128) 		// 숫자 또는 알파벳일 때 출력
                    fprintf(logfile , "%c",(unsigned char)data[j]); 
                 
                else fprintf(logfile , ".");  			// 그렇지 않으면 .(점) 을 출력
            }
            fprintf(logfile , "\n");
        } 
         
        if(i%16==0) fprintf(logfile , "   ");
            fprintf(logfile , " %02X",(unsigned int)data[i]);
                 
        if( i==Size-1)  
        {
            for(j=0;j<15-i%16;j++) 
            {
              fprintf(logfile , "   ");
            }
             
            fprintf(logfile , "         ");
             
            for(j=i-i%16 ; j<=i ; j++)
            {
                if(data[j]>=32 && data[j]<=128) 
                {
                  fprintf(logfile , "%c",(unsigned char)data[j]);
                }
                else
                {
                  fprintf(logfile , ".");
                }
            }
             
            fprintf(logfile ,  "\n" );
        }
    }
}
